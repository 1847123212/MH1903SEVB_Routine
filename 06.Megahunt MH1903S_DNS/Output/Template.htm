<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\Output\Template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\Output\Template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Jul 13 14:29:51 2021
<BR><P>
<H3>Maximum Stack Usage =        412 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; do_dns &rArr; dns_query &rArr; parseMSG &rArr; dns_answer &rArr; parse_name
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[32]">AWD_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from mhscpu_it.o(i.BusFault_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[12]">CRYPT0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[33]">DAC_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[2f]">DCMI_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[a]">DMA0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from mhscpu_it.o(i.DebugMon_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[17]">EXTI0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[18]">EXTI1_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[19]">EXTI2_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[23]">EXTI3_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[2b]">EXTI4_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[2c]">EXTI5_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[31]">GPU_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from mhscpu_it.o(i.HardFault_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[2a]">I2C0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[21]">KEYBOARD_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[d]">LCD_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[22]">MSR_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from mhscpu_it.o(i.MemManage_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from mhscpu_it.o(i.NMI_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from mhscpu_it.o(i.PendSV_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[30]">QR_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[29]">QSPI_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1a]">RTC_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[e]">SCI0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[26]">SCI2_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1b]">SENSOR_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[11]">SPI0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[24]">SPI1_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[25]">SPI2_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[34]">SPI5_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1e]">SSC_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from mhscpu_it.o(i.SVC_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from delay.o(i.SysTick_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_mhscpu.o(i.SystemInit) referenced from startup_mhscpu.o(.text)
 <LI><a href="#[13]">TIM0_0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[14]">TIM0_1_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[15]">TIM0_2_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[16]">TIM0_3_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1f]">TIM0_4_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[20]">TIM0_5_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[2d]">TIM0_6_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[2e]">TIM0_7_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1c]">TRNG_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[f]">UART0_IRQHandler</a> from mhscpu_it.o(i.UART0_IRQHandler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[10]">UART1_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[27]">UART2_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[28]">UART3_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[c]">USBDMA_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[b]">USB_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from mhscpu_it.o(i.UsageFault_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mhscpu.o(.text)
 <LI><a href="#[38]">fputc</a> from usart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[35]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[39]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a9]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[aa]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ab]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[ac]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[ad]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>AWD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>CRYPT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>GPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>KEYBOARD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>MSR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>QR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SCI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SCI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SENSOR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM0_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM0_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM0_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM0_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>USBDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_usart_buf
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_usart_buf
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[96]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_makequery
</UL>

<P><STRONG><a name="[95]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_makequery
</UL>

<P><STRONG><a name="[94]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_makequery
</UL>

<P><STRONG><a name="[a0]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dns
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[b4]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[b5]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b6]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[41]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[b8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mhscpu_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mhscpu_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>Delay_Init</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, delay.o(i.Delay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Delay_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>Delay_ms</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, delay.o(i.Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_diff_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_query
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Reset
</UL>

<P><STRONG><a name="[50]"></a>Delay_us</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, delay.o(i.Delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_diff_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Reset
</UL>

<P><STRONG><a name="[54]"></a>GPIO_Init</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, mhscpu_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500PIN_Init
</UL>

<P><STRONG><a name="[55]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, mhscpu_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SPIInterface_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[56]"></a>GPIO_ResetBits</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, mhscpu_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GPIO_ResetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Reset
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SPIInterface_CS
</UL>

<P><STRONG><a name="[57]"></a>GPIO_SetBits</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, mhscpu_gpio.o(i.GPIO_SetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Reset
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SPIInterface_CS
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500PIN_Init
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mhscpu_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>IINCHIP_CSoff</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, w5500.o(i.IINCHIP_CSoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IINCHIP_CSoff &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SPIInterface_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>

<P><STRONG><a name="[5a]"></a>IINCHIP_CSon</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, w5500.o(i.IINCHIP_CSon))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IINCHIP_CSon &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SPIInterface_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>

<P><STRONG><a name="[5b]"></a>IINCHIP_READ</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, w5500.o(i.IINCHIP_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IINCHIP_READ &rArr; IINCHIP_CSon &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSon
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSoff
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_SR
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[5c]"></a>IINCHIP_SpiSendData</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, w5500.o(i.IINCHIP_SpiSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IINCHIP_SpiSendData &rArr; W5500SPIInterface_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SPIInterface_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>

<P><STRONG><a name="[5e]"></a>IINCHIP_WRITE</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, w5500.o(i.IINCHIP_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IINCHIP_WRITE &rArr; IINCHIP_CSon &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSon
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSoff
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTR
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRCR
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mhscpu_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mhscpu_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>NVIC_Init</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[60]"></a>Netwwork_Init</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, main.o(i.Netwwork_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Netwwork_Init &rArr; sysinit &rArr; IINCHIP_WRITE &rArr; IINCHIP_CSon &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSUBR
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSIPR
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSHAR
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTR
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRCR
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGAR
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSUBR
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSIPR
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGAR
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mhscpu_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>QSPI_SetLatency</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mhscpu_qspi.o(i.QSPI_SetLatency))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QSPI_SetLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_HSI
</UL>

<P><STRONG><a name="[6d]"></a>SPI_Cmd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mhscpu_spi.o(i.SPI_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SPIInterface_Init
</UL>

<P><STRONG><a name="[6e]"></a>SPI_GetFlagStatus</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mhscpu_spi.o(i.SPI_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SPIInterface_SendByte
</UL>

<P><STRONG><a name="[6f]"></a>SPI_Init</STRONG> (Thumb, 440 bytes, Stack size 16 bytes, mhscpu_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterSlaveModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SPIInterface_Init
</UL>

<P><STRONG><a name="[82]"></a>SPI_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mhscpu_spi.o(i.SPI_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SPIInterface_SendByte
</UL>

<P><STRONG><a name="[81]"></a>SPI_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mhscpu_spi.o(i.SPI_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SPIInterface_SendByte
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mhscpu_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>SYSCTRL_APBPeriphClockCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mhscpu_sysctrl.o(i.SYSCTRL_APBPeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSCTRL_APBPeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SPIInterface_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500PIN_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[72]"></a>SYSCTRL_APBPeriphResetCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mhscpu_sysctrl.o(i.SYSCTRL_APBPeriphResetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSCTRL_APBPeriphResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SPIInterface_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[4c]"></a>SYSCTRL_GetClocksFreq</STRONG> (Thumb, 258 bytes, Stack size 0 bytes, mhscpu_sysctrl.o(i.SYSCTRL_GetClocksFreq))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_SetLatency
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_HCLKConfig
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
</UL>

<P><STRONG><a name="[73]"></a>SYSCTRL_HCLKConfig</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, mhscpu_sysctrl.o(i.SYSCTRL_HCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SYSCTRL_HCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_HSI
</UL>

<P><STRONG><a name="[74]"></a>SYSCTRL_PCLKConfig</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, mhscpu_sysctrl.o(i.SYSCTRL_PCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCTRL_PCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_HSI
</UL>

<P><STRONG><a name="[75]"></a>SYSCTRL_PLLConfig</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, mhscpu_sysctrl.o(i.SYSCTRL_PLLConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCTRL_PLLConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_HSI
</UL>

<P><STRONG><a name="[76]"></a>SYSCTRL_PLLDivConfig</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, mhscpu_sysctrl.o(i.SYSCTRL_PLLDivConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCTRL_PLLDivConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_HSI
</UL>

<P><STRONG><a name="[77]"></a>SYSCTRL_SYSCLKSourceSelect</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mhscpu_sysctrl.o(i.SYSCTRL_SYSCLKSourceSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCTRL_SYSCLKSourceSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_HSE
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, delay.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>SystemClock_Config_HSE</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysc.o(i.SystemClock_Config_HSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemClock_Config_HSE &rArr; SystemClock_Config_HSI &rArr; QSPI_SetLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SYSCLKSourceSelect
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_HSI
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>SystemClock_Config_HSI</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sysc.o(i.SystemClock_Config_HSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemClock_Config_HSI &rArr; QSPI_SetLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_SetLatency
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PLLDivConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PLLConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PCLKConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_HCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_HSE
</UL>

<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_mhscpu.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>UART0_IRQHandler</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, mhscpu_it.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITIdentity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>UART_GetITIdentity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mhscpu_uart.o(i.UART_GetITIdentity))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>UART_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_uart.o(i.UART_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[7c]"></a>UART_Init</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, mhscpu_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[a1]"></a>UART_IsTXEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_uart.o(i.UART_IsTXEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[7b]"></a>UART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mhscpu_uart.o(i.UART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>UART_SendData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mhscpu_uart.o(i.UART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[7d]"></a>USART_Init</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USART_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mhscpu_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>W5500PIN_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, w5500.o(i.W5500PIN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = W5500PIN_Init &rArr; GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
</UL>

<P><STRONG><a name="[59]"></a>W5500SPIInterface_CS</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, w5500.o(i.W5500SPIInterface_CS))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSon
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSoff
</UL>

<P><STRONG><a name="[80]"></a>W5500SPIInterface_Init</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, w5500.o(i.W5500SPIInterface_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = W5500SPIInterface_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
</UL>

<P><STRONG><a name="[5d]"></a>W5500SPIInterface_SendByte</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, w5500.o(i.W5500SPIInterface_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W5500SPIInterface_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
</UL>

<P><STRONG><a name="[83]"></a>W5500_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, w5500.o(i.W5500_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = W5500_Init &rArr; W5500SPIInterface_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SPIInterface_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500PIN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>W5500_Reset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, w5500.o(i.W5500_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = W5500_Reset &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b9]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[69]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dns
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_usart_buf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Netwwork_Init
</UL>

<P><STRONG><a name="[ba]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[bb]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[bc]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[bd]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[be]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[53]"></a>assert_failed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.assert_failed))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SYSCLKSourceSelect
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PLLDivConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PLLConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PCLKConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_HCLKConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[8c]"></a>check_usart_buf</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, dns.o(i.check_usart_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = check_usart_buf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>close</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, socket.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = close &rArr; IINCHIP_WRITE &rArr; IINCHIP_CSon &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_query
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[8f]"></a>dns_answer</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, dns.o(i.dns_answer))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = dns_answer &rArr; parse_name
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_name
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseMSG
</UL>

<P><STRONG><a name="[92]"></a>dns_makequery</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, dns.o(i.dns_makequery))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dns_makequery &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_query
</UL>

<P><STRONG><a name="[97]"></a>dns_query</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, dns.o(i.dns_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = dns_query &rArr; parseMSG &rArr; dns_answer &rArr; parse_name
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseMSG
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_makequery
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_SR
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dns
</UL>

<P><STRONG><a name="[9e]"></a>dns_question</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dns.o(i.dns_question))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = dns_question &rArr; parse_name
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_name
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseMSG
</UL>

<P><STRONG><a name="[9f]"></a>do_dns</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dns.o(i.do_dns))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = do_dns &rArr; dns_query &rArr; parseMSG &rArr; dns_answer &rArr; parse_name
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_query
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IsTXEmpty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[6b]"></a>getGAR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(i.getGAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = getGAR &rArr; wiz_read_buf &rArr; IINCHIP_CSon &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Netwwork_Init
</UL>

<P><STRONG><a name="[a7]"></a>getIINCHIP_TxMAX</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, w5500.o(i.getIINCHIP_TxMAX))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[68]"></a>getSIPR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w5500.o(i.getSIPR))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = getSIPR &rArr; wiz_read_buf &rArr; IINCHIP_CSon &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Netwwork_Init
</UL>

<P><STRONG><a name="[6a]"></a>getSUBR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w5500.o(i.getSUBR))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = getSUBR &rArr; wiz_read_buf &rArr; IINCHIP_CSon &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Netwwork_Init
</UL>

<P><STRONG><a name="[99]"></a>getSn_RX_RSR</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, w5500.o(i.getSn_RX_RSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = getSn_RX_RSR &rArr; IINCHIP_READ &rArr; IINCHIP_CSon &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_query
</UL>

<P><STRONG><a name="[98]"></a>getSn_SR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w5500.o(i.getSn_SR))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = getSn_SR &rArr; IINCHIP_READ &rArr; IINCHIP_CSon &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_query
</UL>

<P><STRONG><a name="[4f]"></a>get_diff_tick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, delay.o(i.get_diff_tick))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[4e]"></a>get_tick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, delay.o(i.get_tick))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[93]"></a>htons</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, ult.o(i.htons))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = htons
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swaps
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_makequery
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = main &rArr; do_dns &rArr; dns_query &rArr; parseMSG &rArr; dns_answer &rArr; parse_name
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dns
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_usart_buf
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Reset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_HSE
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Netwwork_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[91]"></a>ntohs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ult.o(i.ntohs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ntohs &rArr; htons
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseMSG
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_answer
</UL>

<P><STRONG><a name="[9b]"></a>parseMSG</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, dns.o(i.parseMSG))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = parseMSG &rArr; dns_answer &rArr; parse_name
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_question
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_answer
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_query
</UL>

<P><STRONG><a name="[90]"></a>parse_name</STRONG> (Thumb, 156 bytes, Stack size 284 bytes, dns.o(i.parse_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = parse_name
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_question
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_answer
</UL>

<P><STRONG><a name="[9a]"></a>recvfrom</STRONG> (Thumb, 486 bytes, Stack size 48 bytes, socket.o(i.recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = recvfrom &rArr; wiz_read_buf &rArr; IINCHIP_CSon &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_query
</UL>

<P><STRONG><a name="[a5]"></a>send_data_processing</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, w5500.o(i.send_data_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = send_data_processing &rArr; wiz_write_buf &rArr; IINCHIP_CSon &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[9d]"></a>sendto</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, socket.o(i.sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sendto &rArr; send_data_processing &rArr; wiz_write_buf &rArr; IINCHIP_CSon &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIINCHIP_TxMAX
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_query
</UL>

<P><STRONG><a name="[63]"></a>setGAR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(i.setGAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = setGAR &rArr; wiz_write_buf &rArr; IINCHIP_CSon &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Netwwork_Init
</UL>

<P><STRONG><a name="[67]"></a>setRCR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(i.setRCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = setRCR &rArr; IINCHIP_WRITE &rArr; IINCHIP_CSon &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Netwwork_Init
</UL>

<P><STRONG><a name="[66]"></a>setRTR</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, w5500.o(i.setRTR))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = setRTR &rArr; IINCHIP_WRITE &rArr; IINCHIP_CSon &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Netwwork_Init
</UL>

<P><STRONG><a name="[61]"></a>setSHAR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w5500.o(i.setSHAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = setSHAR &rArr; wiz_write_buf &rArr; IINCHIP_CSon &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Netwwork_Init
</UL>

<P><STRONG><a name="[64]"></a>setSIPR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w5500.o(i.setSIPR))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = setSIPR &rArr; wiz_write_buf &rArr; IINCHIP_CSon &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Netwwork_Init
</UL>

<P><STRONG><a name="[62]"></a>setSUBR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w5500.o(i.setSUBR))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = setSUBR &rArr; wiz_write_buf &rArr; IINCHIP_CSon &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Netwwork_Init
</UL>

<P><STRONG><a name="[9c]"></a>socket</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, socket.o(i.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = socket &rArr; close &rArr; IINCHIP_WRITE &rArr; IINCHIP_CSon &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_query
</UL>

<P><STRONG><a name="[a4]"></a>swaps</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ult.o(i.swaps))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>

<P><STRONG><a name="[65]"></a>sysinit</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, w5500.o(i.sysinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sysinit &rArr; IINCHIP_WRITE &rArr; IINCHIP_CSon &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Netwwork_Init
</UL>

<P><STRONG><a name="[a3]"></a>wiz_read_buf</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, w5500.o(i.wiz_read_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wiz_read_buf &rArr; IINCHIP_CSon &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSon
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSoff
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSUBR
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSIPR
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGAR
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[a6]"></a>wiz_write_buf</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, w5500.o(i.wiz_write_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wiz_write_buf &rArr; IINCHIP_CSon &rArr; W5500SPIInterface_CS &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSon
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSoff
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSUBR
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSIPR
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSHAR
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGAR
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[51]"></a>GPIO_GetGPIONum</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, mhscpu_gpio.o(i.GPIO_GetGPIONum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[70]"></a>SPI_MasterSlaveModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, mhscpu_spi.o(i.SPI_MasterSlaveModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[87]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[86]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[8a]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[89]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
